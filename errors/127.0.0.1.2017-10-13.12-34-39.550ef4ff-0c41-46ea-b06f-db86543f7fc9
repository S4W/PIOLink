(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/packages/dal/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/packages/dal/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 155, in __init__\n    self.reconnect()\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/packages/dal/pydal/connection.py", line 104, in reconnect\n    self.connection = f()\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 152, in connector\n    return self.driver.connect(**driver_args)\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/contrib/pg8000/__init__.py", line 336, in connect\n    user, host, unix_sock, port, database, password, ssl)\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/contrib/pg8000/core.py", line 1282, in __init__\n    raise self.error\nProgrammingError: (\'FATAL\', \'3D000\', \'database "SisPIO" does not exist\')\n'
p3
sS'layer'
p4
S'/home/aabv/Documentos/Web2py/web2py/applications/SisPIOSinConsultaV2/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# -------------------------------------------------------------------------\n# This scaffolding model makes your app work on Google App Engine too\n# File is released under public domain and you can use without limitations\n# -------------------------------------------------------------------------\n\nif request.global_settings.web2py_version < "2.14.1":\n    raise HTTP(500, "Requires web2py 2.13.3 or newer")\n\n# -------------------------------------------------------------------------\n# if SSL/HTTPS is properly configured and you want all HTTP requests to\n# be redirected to HTTPS, uncomment the line below:\n# -------------------------------------------------------------------------\n# request.requires_https()\n\n# -------------------------------------------------------------------------\n# app configuration made easy. Look inside private/appconfig.ini\n# -------------------------------------------------------------------------\nfrom gluon.contrib.appconfig import AppConfig\n\n# -------------------------------------------------------------------------\n# once in production, remove reload=True to gain full speed\n# -------------------------------------------------------------------------\nmyconf = AppConfig(reload=True)\n\nif not request.env.web2py_runtime_gae:\n    # ---------------------------------------------------------------------\n    # if NOT running on Google App Engine use SQLite or other DB\n    # ---------------------------------------------------------------------\n    db = DAL(\'postgres://SisPIO:SisPIO@localhost/SisPIO\')\nelse:\n    # ---------------------------------------------------------------------\n    # connect to Google BigTable (optional \'google:datastore://namespace\')\n    # ---------------------------------------------------------------------\n    db = DAL(\'google:datastore+ndb\')\n    # ---------------------------------------------------------------------\n    # store sessions and tickets there\n    # ---------------------------------------------------------------------\n    session.connect(request, response, db=db)\n    # ---------------------------------------------------------------------\n    # or store session in Memcache, Redis, etc.\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\n    # ---------------------------------------------------------------------\n\n# -------------------------------------------------------------------------\n# by default give a view/generic.extension to all actions from localhost\n# none otherwise. a pattern can be \'controller/function.extension\'\n# -------------------------------------------------------------------------\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n# -------------------------------------------------------------------------\n# choose a style for forms\n# -------------------------------------------------------------------------\nresponse.formstyle = myconf.get(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.get(\'forms.separator\') or \'\'\n\n# -------------------------------------------------------------------------\n# (optional) optimize handling of static files\n# -------------------------------------------------------------------------\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n# -------------------------------------------------------------------------\n# (optional) static assets folder versioning\n# -------------------------------------------------------------------------\n# response.static_version = \'0.0.0\'\n\n# -------------------------------------------------------------------------\n# Here is sample code if you need for\n# - email capabilities\n# - authentication (registration, login, logout, ... )\n# - authorization (role based authorization)\n# - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n# - old style crud actions\n# (more options discussed in gluon/tools.py)\n# -------------------------------------------------------------------------\n\nfrom gluon.tools import Auth, Service, PluginManager\n\n# host names must be a list of allowed host names (glob syntax allowed)\nauth = Auth(db, host_names=myconf.get(\'host.names\'))\nservice = Service()\nplugins = PluginManager()\n\n# -------------------------------------------------------------------------\n# create all tables needed by auth if not custom tables\n# -------------------------------------------------------------------------\nauth.settings.table_user_name = \'usuario\'\n\nauth.define_tables(username = True, signature = False, migrate=\'db.usuario\')\n\ndb.usuario.username.length = 8\n\nauth.settings.create_user_groups = None\n\n# -------------------------------------------------------------------------\n# configure email\n# -------------------------------------------------------------------------\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' if request.is_local else myconf.get(\'smtp.server\')\nmail.settings.sender = \'proppio@usb.ve\'\nmail.settings.login = myconf.get(\'smtp.login\')\nmail.settings.tls = myconf.get(\'smtp.tls\') or False\nmail.settings.ssl = myconf.get(\'smtp.ssl\') or False\n\n# -------------------------------------------------------------------------\n# configure auth policy\n# -------------------------------------------------------------------------\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\nauth.settings.login_url = URL(\'index\')\nauth.settings.login_next = URL(\'redireccionando\')\n\n# -------------------------------------------------------------------------\n# Define your tables below (or better in another model file) for example\n#\n# >>> db.define_table(\'mytable\', Field(\'myfield\', \'string\'))\n#\n# Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n#       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n# There is an implicit \'id integer autoincrement\' field\n# Consult manual for more options, validators, etc.\n#\n# More API examples for controllers:\n#\n# >>> db.mytable.insert(myfield=\'value\')\n# >>> rows = db(db.mytable.myfield == \'value\').select(db.mytable.ALL)\n# >>> for row in rows: print row.id, row.myfield\n# -------------------------------------------------------------------------\n\n# -------------------------------------------------------------------------\n# after defining tables, uncomment below to enable auditing\n# -------------------------------------------------------------------------\n# auth.enable_record_versioning(db)\n\ndb.define_table(\n    \'liceo\',\n    Field(\'nombre\', type=\'string\', notnull=True),\n    Field(\'tipo\', type=\'string\', notnull=True, requires=IS_IN_SET([\'Publico\', \'Subsidiado\'])),\n\n    migrate=\'db.liceo\'\n    )\n\ndb.define_table(\n    \'estudiante\',\n    Field(\'ci\', type=\'string\', length=8, notnull=True, unique=True, requires=IS_IN_DB(db, db.usuario.username)),\n    Field(\'promedio\', type=\'integer\', notnull=True),\n    Field(\'direccion\', type=\'string\', default=\'\'),\n    Field(\'fecha_nacimiento\', type=\'date\', requires=IS_EMPTY_OR(IS_DATE(format=T(\'%d/%m/%Y\'), error_message=\'Debe ser del siguiente formato: dd/mm/yyyy\'))),\n    Field(\'sexo\', type=\'string\', requires=IS_IN_SET([\'Masculino\', \'Femenino\'])),\n    Field(\'estatus\', type=\'string\', default=\'pre-inscrito\', requires=IS_IN_SET([\'Pre-inscrito\', \'Seleccionado\', \'Activo\', \'Inactivo\', \'Finalizado\'])),\n    Field(\'cohorte\', type=\'string\', default=\'\'),\n    Field(\'ci_representante\', type=\'string\', length=8, default=\'\'),\n    Field(\'nombre_representante\', type=\'string\', default=\'\'),\n    Field(\'apellido_representante\', type=\'string\', default=\'\'),\n    Field(\'correo_representante\', type=\'string\', length=128, required=True, default=\'\', requires=IS_EMPTY_OR(IS_EMAIL(error_message=\'Debe tener un formato v\xc3\xa1lido. EJ: example@org.com\'))),\n    Field(\'direccion_representante\', type=\'string\', default=\'\'),\n    Field(\'nombre_liceo\', type=\'string\', required=True, requires=IS_IN_DB(db, db.liceo.nombre)),\n\n    migrate="db.estudiante"\n    )\n\ndb.define_table(\n    \'profesor\',\n    Field(\'ci\', type=\'string\', length=8, notnull=True, unique=True, requires=IS_IN_DB(db, db.usuario.username)),\n\n    migrate="db.profesor"\n    )\n\ndb.define_table(\n    \'representante_sede\',\n    Field(\'ci\', type=\'string\', length=8, notnull=True, unique=True, requires=IS_IN_DB(db, db.usuario.username)),\n    Field(\'sede\', \'string\'),\n\n    migrate="db.representante_sede"\n    )\n\ndb.define_table(\n    \'representante_liceo\',\n    Field(\'ci\', type=\'string\', length=8, notnull=True, unique=True, requires=IS_IN_DB(db, db.usuario.username)),\n    Field(\'nombre_liceo\', type=\'string\', required=True, requires=IS_IN_DB(db, db.liceo.nombre)),\n\n    migrate="db.representante_liceo"\n    )\n\ndb.define_table(\n    \'materia\',\n    Field(\'nombre\', type=\'string\', notnull=True),\n    Field(\'ci_profesor\', type=\'string\', requires=IS_IN_DB(db, db.profesor.ci)),\n\n    migrate=\'db.materia\'\n    )\n\ndb.define_table(\n    \'cursa\',\n    Field(\'ci_estudiante\', type=\'string\', requires=IS_IN_DB(db, db.estudiante.ci)),\n    Field(\'nombre_materia\', type=\'string\', requires=IS_IN_DB(db, db.materia.nombre)),\n    Field(\'notas\', type=\'list:integer\'),\n\n    migrate=\'db.cursa\'\n    )\n\ndb.define_table(\n    \'asistencia\',\n    Field(\'ci_estudiante\', type=\'string\', requires=IS_IN_DB(db, db.estudiante.ci)),\n    Field(\'nombre_materia\', type=\'string\', requires=IS_IN_DB(db, db.materia.nombre)),\n    Field(\'fecha_clase\', type=\'date\'),\n\n    migrate=\'db.asistencia\'\n    )\n\ndb.define_table(\n    \'carrera\',\n    Field(\'id\', type=\'integer\', unique=True, notnull=True),\n    Field(\'nombre\', type=\'string\'),\n\n    migrate=\'db.carrera\'\n    )\n\ndb.define_table(\n    \'exime\',\n    Field(\'ci_estudiante\', type=\'string\', length=8, notnull=True, requires=IS_IN_DB(db, db.estudiante.ci)),\n    Field(\'ci_representante_liceo\', type=\'string\', length=8, notnull=True, requires=IS_IN_DB(db, db.representante_liceo.ci)),\n    Field(\'cohorte\', type=\'string\', notnull=True),\n\n    migrate=\'db.exime\'\n    )\n\ndb.define_table(\n    \'periodos\',\n    Field(\'nombre\', type=\'string\'),\n    Field(\'fecha_inicio\', type=\'date\', requires=IS_DATE(format=T(\'%d/%m/%Y\'), error_message=\'Debe ser del siguiente formato: dd/mm/yyyy\')),\n    Field(\'fecha_fin\', type=\'date\', requires=IS_DATE(format=T(\'%d/%m/%Y\'), error_message=\'Debe ser del siguiente formato: dd/mm/yyyy\')),\n\n    migrate=\'db.periodos\'\n    )\n\n# db.define_table(\n#     \'cohorte\',\n#     Field(\'id\', type=\'string\'),\n#     Field(\'estado\', type=\'boolean\')\n\n#     primarykey=[\'id\'],\n#     migrate=\'db.cohorte\'\n#     )\n\n\nif not db(db.usuario.username == \'admin\').select():\n    id_usuario = db.usuario.insert(username=\'admin\', password=CRYPT()(\'admin\')[0], first_name=\'SisPIO\', last_name=\'Admin\', email=\'admin@usb.ve\')\n\n    estudiante = auth.add_group(role=\'Estudiante\', description=\'description\')\n    profesor = auth.add_group(role=\'Profesor\', description=\'description\')\n    representante_liceo = auth.add_group(role=\'Representante_liceo\', description=\'description\')\n    representante_sede = auth.add_group(role=\'Representante_sede\', description=\'description\')\n    admin = auth.add_group(role=\'Administrador\', description=\'description\')\n\n    auth.add_permission(estudiante, \'Estudiante\')\n\n    auth.add_permission(profesor, \'Estudiante\')\n    auth.add_permission(profesor, \'Profesor\')\n\n    auth.add_permission(representante_liceo, \'Estudiante\')\n    auth.add_permission(representante_liceo, \'Representante_liceo\')\n\n    auth.add_permission(representante_sede, \'Estudiante\')\n    auth.add_permission(representante_sede, \'Representante_sede\')\n\n    auth.add_permission(admin, \'Estudiante\')\n    auth.add_permission(admin, \'Representante_liceo\')\n    auth.add_permission(admin, \'Profesor\')\n    auth.add_permission(admin, \'Representante_sede\')\n    auth.add_permission(admin, \'Administrador\')\n\n    auth.add_membership(admin, id_usuario)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/aabv/Documentos/Web2py/web2py/applications/SisPIOSinConsultaV2/models/db.py", line 31, in <module>\n    db = DAL(\'postgres://SisPIO:SisPIO@localhost/SisPIO\')\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/packages/dal/pydal/base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/packages/dal/pydal/base.py", line 473, in __init__\n    "Failure to connect, tried %d times:\\n%s" % (attempts, tb)\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/packages/dal/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/packages/dal/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 155, in __init__\n    self.reconnect()\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/packages/dal/pydal/connection.py", line 104, in reconnect\n    self.connection = f()\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 152, in connector\n    return self.driver.connect(**driver_args)\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/contrib/pg8000/__init__.py", line 336, in connect\n    user, host, unix_sock, port, database, password, ssl)\n  File "/home/aabv/Documentos/Web2py/web2py/gluon/contrib/pg8000/core.py", line 1282, in __init__\n    raise self.error\nProgrammingError: (\'FATAL\', \'3D000\', \'database "SisPIO" does not exist\')\n\n'
p11
s.